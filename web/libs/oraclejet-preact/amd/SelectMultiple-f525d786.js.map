{"version":3,"file":"SelectMultiple-f525d786.js","sources":["../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'accessibleLabel' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  accessibleLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = accessibleLabel ? `${accessibleLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip accessibleLabel={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItems?: Item<K, D>[]\n): string {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = _createDisplayValues(itemText, valueItems);\n    const concatDisplayValues = _concatDisplayValues(displayValues, separator);\n    return concatDisplayValues;\n  }, [valueItems, itemText]);\n\n  return concatenatedDisplayValues;\n}\n\nfunction _concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction _createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, KEYS, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype UseSelectMultipleProps<K, D> = PickedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: MutableRef<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, []);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback((event: MouseEvent) => {\n    // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n    // on the chip before switching to show only the selected values on mouseup when the click\n    // is handled\n    event.preventDefault();\n    // explicitly focus the input because it won't happen naturally due to preventDefault()\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      { onAutoDismiss: baseHandleDropdownAutoDismiss },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onSelectionChange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    onLoadRange,\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so the return statement below doesn't show a type error\n  // related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: valueItems?.length ?? 0,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Label } from '../UNSAFE_Label';\nimport { ListView } from '../UNSAFE_ListView';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownArrow,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  isBeforeDataFetch,\n  isMobile\n} from '../PRIVATE_SelectCommon';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof ListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      ariaDescribedBy,\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      onLoadRange,\n      searchText,\n      selectedValuesCountProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      data: propData,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValues(itemText, valueItems);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          ariaAutoComplete=\"list\"\n          ariaControls={dropdownId}\n          ariaExpanded={isDropdownOpen}\n          ariaLabel={ariaLabel}\n          autoComplete=\"off\"\n          hasInsideLabel={hasInsideLabel}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          // onCommit={handleCommit}\n          {...inputEventHandlers}\n          placeholder={placeholder}\n          role=\"combobox\"\n          spellcheck={false}\n          textAlign={textAlign}\n          type={isMobile() ? (virtualKeyboard === 'auto' ? 'search' : virtualKeyboard) : undefined}\n          value={isUserFiltering ? userInput : displayValue}\n          {...inputProps}\n        />\n        <LiveRegion>{liveRegionText}</LiveRegion>\n      </Fragment>\n    );\n\n    const dropdownArrow = (\n      <DropdownArrow\n        isDisabled={isDisabled}\n        size={hasInsideLabel ? 'md' : 'sm'}\n        {...dropdownArrowEventHandlers}\n      />\n    );\n    const selectedValuesCount = valueItems?.length;\n    const endContent = isLoading ? undefined : !hasSelectedValuesCount ? (\n      dropdownArrow\n    ) : (\n      <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n        <SelectedValuesCount\n          accessibleLabel={label}\n          count={selectedValuesCount}\n          isDisabled={isDisabled}\n          isSelected={isDropdownSelectedOnlyView}\n          {...selectedValuesCountProps}\n        />\n        {dropdownArrow}\n      </Flex>\n    );\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...collectionProps}\n        accessibleSummary={label ?? ''}\n        data={data}\n        itemText={itemText}\n        onLoadRange={onLoadRange}\n        searchText={\n          isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n        }\n        selectionMode=\"multiple\"\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <TextField\n            endContent={endContent}\n            inlineUserAssistance={inlineUserAssistance}\n            mainContent={mainContent}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onfocusout}\n            onFocus={focusProps?.onfocusin}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}></TextField>\n        </FormFieldContext.Provider>\n        <Dropdown\n          dropdownRef={dropdownRef}\n          id={dropdownId}\n          isOpen={\n            isDropdownOpen &&\n            data !== undefined &&\n            (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults)\n          }\n          anchorRef={mainFieldRef}\n          {...dropdownEventHandlers}>\n          <DropdownList\n            hasBottomGap={dropdownInlineUserAssistance === undefined}\n            isLoading={data === null}>\n            {dropdownListContent}\n          </DropdownList>\n          {dropdownInlineUserAssistance}\n        </Dropdown>\n      </Fragment>\n    );\n  }\n);\n"],"names":["SelectedValuesCount","_a","accessibleLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","__rest","translations","useTranslationBundle","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","_jsx","Object","assign","class","children","jsx","Chip","label","useDisplayValues","itemText","valueItems","separator","plural_separator","concatenatedDisplayValues","useMemo","undefined","displayValues","selectedItems","arValues","values","mapFunc","itemContext","renderItemText","mappedArray","map","Set","_createDisplayValues","concatDisplayValues","Array","from","join","_concatDisplayValues","useSelectMultiple","data","propData","inputRef","isDisabled","isFocused","propIsFocused","isReadonly","onCommit","onFilter","onLoadRange","propOnLoadRange","isDropdownSelectedOnlyView","setDropdownSelectedOnlyView","useState","selectedValuesCount","length","hasSelectedValuesCount","selectedOnlyDataProps","offset","totalSize","sizePrecision","valueItem","metadata","key","useSelectedOnlyData","currentRow","dropdownRef","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","handleUpDownArrowKeys","isDropdownOpen","isUserFiltering","mainFieldRef","onCurrentKeyChange","searchText","selectedKeys","setCurrentRow","setDropdownOpen","setSelectedKeys","userInput","useSelectCommon","removeDropdown","useCallback","_b","current","parentElement","removeChild","myHandleDropdownAutoDismiss","event","type","keyboardEvent","code","KEYS","TAB","shiftKey","focus","chipRef","myHandleMainFieldKeyDown","isControlOrFunctionKey","stopPropagation","useEffect","keys","reduce","accumKeys","currentItem","add","useRef","querySelector","handleSelectedValuesCountKeyDown","UP","DOWN","preventDefault","ESC","ENTER","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","detail","value","onSelectionChange","newKeys","previousValue","dropdownEventHandlers","mergeProps","onAutoDismiss","inputEventHandlers","onInput","rowKey","collectionProps","currentKey","dropdownArrowEventHandlers","onClick","mouseProps","selectedValuesCountProps","onToggle","SelectMultiple","forwardRef","ariaDescribedBy","assistiveText","helpSourceLink","helpSourceText","propIsDisabled","isLoading","propIsLoading","propIsReadonly","isRequired","isRequiredShown","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","variant","virtualKeyboard","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","origIsFocused","readonlyElementRef","useFocusableTextField","useLoadingIndicatorTimer","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","dropdownId","displayValue","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","FormFieldContext","Provider","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","ariaLabelledBy","id","as","elementRef","hasInsideLabel","isDataFetched","isBeforeDataFetch","liveRegionText","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","ariaAutoComplete","ariaControls","ariaExpanded","autoComplete","spellcheck","isMobile","LiveRegion","dropdownArrow","DropdownArrow","size","endContent","Flex","align","justify","gap","isSelected","dropdownInlineUserAssistance","DropdownUserAssistance","isEmptyResults","dropdownListContent","EmptyResults","DefaultList","accessibleSummary","selectionMode","TextField","Dropdown","isOpen","anchorRef","DropdownList","hasBottomGap"],"mappings":"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"}